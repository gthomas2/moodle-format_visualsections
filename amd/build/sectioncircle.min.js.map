{"version":3,"sources":["../src/sectioncircle.js"],"names":["define","$","applySegments","each","subtopics","data","createSegments","createSvgArc","x","y","r","startAngle","endAngle","s","Math","PI","largeArc","cos","sin","join","createSvgProgress","rotation","perc","dasharr","imageHtml","rectSize","typeCode","link","output","sectionCircle","segments","percMult","length","find","attr","arcsEl","empty","rot","rotbase","segment","appendTo","progress","sliceoffset","html","angle","phi","typecode"],"mappings":"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","sourcesContent":["define(['jquery'], function($) {\n    return {\n        applySegments: function() {\n            $(function() {\n\n                $('.section-circle svg').each(function() {\n                    const subtopics = $(this).data('subtopicsjson');\n                    createSegments(this, subtopics);\n                });\n\n                function createSvgArc(x, y, r, startAngle, endAngle) {\n                    if (startAngle > endAngle) {\n                        var s = startAngle;\n                        startAngle = endAngle;\n                        endAngle = s;\n                    }\n                    if (endAngle - startAngle > Math.PI * 2) {\n                        endAngle = Math.PI * 1.99999;\n                    }\n\n                    var largeArc = endAngle - startAngle <= Math.PI ? 0 : 1;\n\n                    return [\n                        \"M\",\n                        x,\n                        y,\n                        \"L\",\n                        x + Math.cos(startAngle) * r,\n                        y - Math.sin(startAngle) * r,\n                        \"A\",\n                        r,\n                        r,\n                        0,\n                        largeArc,\n                        0,\n                        x + Math.cos(endAngle) * r,\n                        y - Math.sin(endAngle) * r,\n                        \"L\",\n                        x,\n                        y\n                    ].join(\" \") + \" Z\";\n                }\n\n                function createSvgProgress(r, rotation, perc) {\n                    var dasharr = 2 * Math.PI * r;\n                    var dashoffset = dasharr * (1 - (perc / 100));\n                    return `<circle class=\"subsection-progress\" cx=\"0\" cy=\"0\" r=\"${r}\"\n                                    transform=\"rotate(${rotation}) scale(1 -1)\"\n                                    stroke-dasharray=\"${dasharr}\"\n                                    stroke-dashoffset=\"${dashoffset}\"\n                                    stroke-width=\"20\"\n                                    fill=\"none\"/>`;\n                }\n\n                function imageHtml(x, y, rectSize, typeCode, link) {\n                    let output = `<rect x=\"${x}\" y=\"${y}\" width=\"${rectSize}\" height=\"${rectSize}\" fill=\"url(#${typeCode})\" />`;\n                    if (link) {\n                        output = `<a href=\"${link}\">${output}</a>`;\n                    }\n                    return output;\n                }\n\n                function createSegments(sectionCircle, segments) {\n                    let percMult = 100 / segments.length;\n                    let r = $(sectionCircle).find('> circle').attr('r');\n                    let rectSize = r;\n                    let startAngle = 0;\n                    let perc = 0;\n                    let arcsEl = $(sectionCircle).find(\".arcs\");\n\n                    arcsEl.empty();\n\n                    var rot = 0;\n                    var rotbase = 360 / segments.length;\n\n                    if (segments.length > 1) {\n                        for (let s = 0; s < segments.length; s++) {\n\n                            perc += percMult;\n\n                            var segment = segments[s];\n\n                            let endAngle = (Math.PI * 2) / (100 / perc);\n                            $(\"<path />\")\n                                .attr(\"d\", createSvgArc(0, 0, r, startAngle, endAngle * 2))\n                                .attr(\"stroke-width\", \"6\")\n                                .attr(\"fill\", \"none\")\n                                //.attr(\"fill-opacity\", \"0.4\")\n                                .appendTo($(arcsEl));\n\n                            // Add progress.\n                            if (segment.progress > 0) {\n                                // We use the sliceoffset to make it work counter clockwise.\n                                var sliceoffset = 100 - segment.progress > 0 ? (100 - segment.progress) / 100 : 0;\n                                rot = (rotbase + ((s - sliceoffset) * (360 / segments.length)));\n                                $(createSvgProgress(370, rot, segment.progress / segments.length))\n                                    .appendTo($(arcsEl));\n                            }\n\n                            $(arcsEl).html($(arcsEl).html());\n                            startAngle += endAngle;\n                        }\n                    } else {\n                        rot = -180;\n                        var segment = segments[0];\n                        var progress = typeof(segment) !== 'undefined' ? segment.progress : 0;\n                        $(createSvgProgress(370, rot, progress / segments.length))\n                            .appendTo($(arcsEl));\n                    }\n\n                    switch (segments.length) {\n                        case 1: rectSize = r*1.3; break;\n                        case 2: rectSize = r/1.25; break;\n                        case 3: rectSize = r/1.5; break;\n                        case 4: rectSize = r/1.75; break;\n                        case 5: rectSize = r/1.75; break;\n                    }\n\n                    if (segments.length > 1) {\n                        for (let s = 0; s < segments.length; s++) {\n                            var angle = Math.PI / segments.length;\n                            var phi = Math.PI / (r) + angle * s * 2;\n                            phi += Math.PI / segments.length;\n\n                            var x = (r/2) * Math.cos(phi);\n                            var y = (r/2) * Math.sin(phi);\n\n                            if (segments.length === 5) {\n                                x = (r/1.75) * Math.cos(phi);\n                                y = (r/1.75) * Math.sin(phi);\n                            }\n\n                            // Rectangles start from the top left corner.\n                            // This code centers the rectangle.\n                            x-=rectSize / 2;\n                            y-=rectSize / 2;\n\n                            // Deal with divided by 2 nicer.\n                            if (segments.length === 2) {\n                                if (s === 1) {\n                                    y = - (rectSize + 20);\n                                } else {\n                                    y = 20;\n                                }\n                            }\n                            const typeCode = segments[s].typecode;\n                            const link = segments[s].link ? segments[s].link : null;\n\n                            $(imageHtml(x, y, rectSize, typeCode, link))\n                                .appendTo($(arcsEl));\n                            $(arcsEl).html($(arcsEl).html());\n                        }\n                    } else if (segments.length === 1) {\n                        const typeCode = segments[0].typecode;\n                        var x = -rectSize/2;\n                        var y = -rectSize/2;\n                        const link = segments[0].link ? segments[0].link : null;\n                        $(imageHtml(x, y, rectSize, typeCode, link))\n                            .appendTo($(arcsEl));\n                        $(arcsEl).html($(arcsEl).html());\n                    }\n                }\n            });\n        }\n    };\n\n});"],"file":"sectioncircle.min.js"}